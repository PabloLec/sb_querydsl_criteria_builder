/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/v1/library/query": {
    post: operations["getLibrariesByQuery"];
  };
  "/api/v1/library/mock": {
    post: operations["insertMockData"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    SearchCriterion: {
      field?: string;
      op?: string;
      value?: string;
      subQuery?: boolean;
      subCriteria?: components["schemas"]["SearchCriterion"][];
    };
    Author: {
      /** Format: int32 */
      authorId?: number;
      name?: string;
      bio?: string;
      nationality?: string;
      /** Format: date */
      birthDate?: string;
      /** Format: date */
      deathDate?: string;
      website?: string;
      books?: components["schemas"]["Book"][];
    };
    Book: {
      /** Format: int32 */
      bookId?: number;
      title?: string;
      isbn?: string;
      /** Format: int32 */
      publishYear?: number;
      edition?: string;
      language?: string;
      genre?: string;
      library?: components["schemas"]["Library"];
      author?: components["schemas"]["Author"];
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      borrowedBooks?: components["schemas"]["BorrowedBook"][];
      reviews?: components["schemas"]["Review"][];
      bookTags?: components["schemas"]["BookTag"][];
      publishers?: components["schemas"]["BookPublisher"][];
    };
    BookPublisher: {
      /** Format: int32 */
      bookId?: number;
      /** Format: int32 */
      publisherId?: number;
      book?: components["schemas"]["Book"];
      publisher?: components["schemas"]["Publisher"];
    };
    BookTag: {
      /** Format: int32 */
      bookId?: number;
      /** Format: int32 */
      tagId?: number;
      book?: components["schemas"]["Book"];
      tag?: components["schemas"]["Tag"];
    };
    BorrowedBook: {
      /** Format: int32 */
      borrowedId?: number;
      book?: components["schemas"]["Book"];
      user?: components["schemas"]["User"];
      /** Format: date */
      borrowDate?: string;
      /** Format: date */
      returnDate?: string;
    };
    EventParticipant: {
      /** Format: int32 */
      eventId?: number;
      /** Format: int32 */
      userId?: number;
      event?: components["schemas"]["LibraryEvent"];
      user?: components["schemas"]["User"];
    };
    Library: {
      /** Format: int32 */
      libraryId?: number;
      name?: string;
      location?: string;
      openingHours?: string;
      /** Format: date */
      establishedDate?: string;
      website?: string;
      email?: string;
      phoneNumber?: string;
      isOpen?: boolean;
      books?: components["schemas"]["Book"][];
      memberships?: components["schemas"]["Membership"][];
      events?: components["schemas"]["LibraryEvent"][];
      staff?: components["schemas"]["LibraryStaff"][];
    };
    LibraryEvent: {
      /** Format: int32 */
      eventId?: number;
      library?: components["schemas"]["Library"];
      eventName?: string;
      /** Format: date */
      eventDate?: string;
      description?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      participants?: components["schemas"]["EventParticipant"][];
    };
    LibraryStaff: {
      /** Format: int32 */
      staffId?: number;
      library?: components["schemas"]["Library"];
      user?: components["schemas"]["User"];
      role?: string;
    };
    Membership: {
      /** Format: int32 */
      membershipId?: number;
      user?: components["schemas"]["User"];
      library?: components["schemas"]["Library"];
      /** Format: date */
      joinDate?: string;
      /** Format: date */
      expirationDate?: string;
      membershipStatus?: string;
    };
    Publisher: {
      /** Format: int32 */
      publisherId?: number;
      name?: string;
      website?: string;
      publishedBooks?: components["schemas"]["BookPublisher"][];
    };
    Review: {
      /** Format: int32 */
      reviewId?: number;
      book?: components["schemas"]["Book"];
      user?: components["schemas"]["User"];
      rating?: number;
      comment?: string;
      /** Format: date */
      reviewDate?: string;
    };
    Tag: {
      /** Format: int32 */
      tagId?: number;
      name?: string;
      description?: string;
      bookTags?: components["schemas"]["BookTag"][];
    };
    User: {
      /** Format: int32 */
      userId?: number;
      username?: string;
      email?: string;
      password?: string;
      fullName?: string;
      /** Format: date */
      dateOfBirth?: string;
      gender?: string;
      borrowedBooks?: components["schemas"]["BorrowedBook"][];
      reviews?: components["schemas"]["Review"][];
      memberships?: components["schemas"]["Membership"][];
      eventParticipants?: components["schemas"]["EventParticipant"][];
      libraryStaff?: components["schemas"]["LibraryStaff"][];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  getLibrariesByQuery: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SearchCriterion"][];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Library"][];
        };
      };
    };
  };
  insertMockData: {
    parameters: {
      query: {
        count: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
}
